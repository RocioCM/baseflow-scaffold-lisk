{
  "address": "0xc3e0Ce9659a8b5C306cc17116F1Df941b1b762A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "merchant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "InventoryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "invoiceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "merchant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InvoiceCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "invoiceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InvoicePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "createInvoice",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "merchant",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        }
      ],
      "name": "getInventory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "itemId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "merchant",
              "type": "address"
            }
          ],
          "internalType": "struct BaseFlowCore.Inventory",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "inventory",
      "outputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "merchant",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "invoices",
      "outputs": [
        {
          "internalType": "address",
          "name": "merchant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "invoiceId",
          "type": "bytes32"
        }
      ],
      "name": "payInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "updateInventory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x357340da037339ebe33400991bf75b423cb6f84a70607e3049786d30e02f29ae",
  "receipt": {
    "to": null,
    "from": "0xf8270a0e89701FDA942FE425c29f5C7A6863174a",
    "contractAddress": "0xc3e0Ce9659a8b5C306cc17116F1Df941b1b762A3",
    "transactionIndex": 1,
    "gasUsed": "1099772",
    "logsBloom": "0x00000000200000000000000000000000000000000000000000800000000000040000000000000000000000000000000000004000000000000001000000000000000000000000000000000000000000000001000000000000000000000000000000000000020001000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x88d15700b4a017ce993a94a80312c9b5aee971d290088e0795eb22b358de1993",
    "transactionHash": "0x357340da037339ebe33400991bf75b423cb6f84a70607e3049786d30e02f29ae",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24775121,
        "transactionHash": "0x357340da037339ebe33400991bf75b423cb6f84a70607e3049786d30e02f29ae",
        "address": "0xc3e0Ce9659a8b5C306cc17116F1Df941b1b762A3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8270a0e89701fda942fe425c29f5c7a6863174a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x88d15700b4a017ce993a94a80312c9b5aee971d290088e0795eb22b358de1993"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 24775121,
        "transactionHash": "0x357340da037339ebe33400991bf75b423cb6f84a70607e3049786d30e02f29ae",
        "address": "0xc3e0Ce9659a8b5C306cc17116F1Df941b1b762A3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f8270a0e89701fda942fe425c29f5c7a6863174a",
          "0x000000000000000000000000f8270a0e89701fda942fe425c29f5c7a6863174a"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x88d15700b4a017ce993a94a80312c9b5aee971d290088e0795eb22b358de1993"
      }
    ],
    "blockNumber": 24775121,
    "cumulativeGasUsed": "1145880",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf8270a0e89701FDA942FE425c29f5C7A6863174a"
  ],
  "numDeployments": 1,
  "solcInputHash": "257e96b339187665cdbc406fb3e84b77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"InventoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"invoiceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvoiceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"invoiceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvoicePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"createInvoice\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"}],\"name\":\"getInventory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"}],\"internalType\":\"struct BaseFlowCore.Inventory\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"invoices\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceId\",\"type\":\"bytes32\"}],\"name\":\"payInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateInventory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"implementation of the BaseFlowCore abstract contract This contract is used for deployment while inheriting all functionality from BaseFlowCore\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"details\":\"Constructor that initializes the contract with the USDC token address\",\"params\":{\"_usdc\":\"Address of the USDC token contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"title\":\"BaseFlowImplementation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseFlowImplementation.sol\":\"BaseFlowImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseFlowCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nabstract contract BaseFlowCore is Ownable2Step, ReentrancyGuard {\\n    IERC20 public immutable usdc;\\n\\n    struct Invoice {\\n        address merchant;\\n        address customer;\\n        uint256 amount;\\n        uint256 dueDate;\\n        bool paid;\\n        string metadata; // IPFS hash containing invoice details\\n    }\\n\\n    struct Inventory {\\n        string itemId;\\n        uint256 quantity;\\n        uint256 price;\\n        address merchant;\\n    }\\n\\n    mapping(bytes32 => Invoice) public invoices;\\n    mapping(address => mapping(string => Inventory)) public inventory;\\n\\n    event InvoiceCreated(bytes32 indexed invoiceId, address merchant, address customer, uint256 amount);\\n    event InvoicePaid(bytes32 indexed invoiceId, address customer, uint256 amount);\\n    event InventoryUpdated(address merchant, string itemId, uint256 quantity, uint256 price);\\n\\n    constructor(address _usdc) {\\n        usdc = IERC20(_usdc);\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    function createInvoice(\\n        address customer,\\n        uint256 amount,\\n        uint256 dueDate,\\n        string calldata metadata\\n    ) external returns (bytes32) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(dueDate > block.timestamp, \\\"Invalid due date\\\");\\n\\n        bytes32 invoiceId = keccak256(\\n            abi.encodePacked(msg.sender, customer, amount, dueDate, block.timestamp)\\n        );\\n\\n        invoices[invoiceId] = Invoice({\\n            merchant: msg.sender,\\n            customer: customer,\\n            amount: amount,\\n            dueDate: dueDate,\\n            paid: false,\\n            metadata: metadata\\n        });\\n\\n        emit InvoiceCreated(invoiceId, msg.sender, customer, amount);\\n        return invoiceId;\\n    }\\n\\n    function payInvoice(bytes32 invoiceId) external nonReentrant {\\n        Invoice storage invoice = invoices[invoiceId];\\n        require(!invoice.paid, \\\"Invoice already paid\\\");\\n        require(block.timestamp <= invoice.dueDate, \\\"Invoice expired\\\");\\n        require(msg.sender == invoice.customer, \\\"Not invoice customer\\\");\\n\\n        invoice.paid = true;\\n\\n        require(\\n            usdc.transferFrom(msg.sender, invoice.merchant, invoice.amount),\\n            \\\"Payment failed\\\"\\n        );\\n\\n        emit InvoicePaid(invoiceId, msg.sender, invoice.amount);\\n    }\\n\\n    function updateInventory(\\n        string calldata itemId,\\n        uint256 quantity,\\n        uint256 price\\n    ) external {\\n        inventory[msg.sender][itemId] = Inventory({\\n            itemId: itemId,\\n            quantity: quantity,\\n            price: price,\\n            merchant: msg.sender\\n        });\\n\\n        emit InventoryUpdated(msg.sender, itemId, quantity, price);\\n    }\\n\\n    function getInventory(address merchant, string calldata itemId)\\n        external\\n        view\\n        returns (Inventory memory)\\n    {\\n        return inventory[merchant][itemId];\\n    }\\n}\\n\",\"keccak256\":\"0x1d3e7009337a110633f6903446dcbd752d6343e6e7327133f9d3ac2b840dab77\",\"license\":\"MIT\"},\"contracts/BaseFlowImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./BaseFlowCore.sol\\\";\\n\\n/**\\n * @title BaseFlowImplementation\\n * @dev implementation of the BaseFlowCore abstract contract\\n * This contract is used for deployment while inheriting all functionality from BaseFlowCore\\n */\\ncontract BaseFlowImplementation is BaseFlowCore {\\n    /**\\n     * @dev Constructor that initializes the contract with the USDC token address\\n     * @param _usdc Address of the USDC token contract\\n     */\\n    constructor(address _usdc) BaseFlowCore(_usdc) {}\\n}\\n\",\"keccak256\":\"0x8c6322df6c8b4d3c37ec68d4445348bc725fabf74cb12f0f15c3177e379a35dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161130c38038061130c83398101604081905261002f916100c7565b806100393361005b565b60016002556001600160a01b0381166080526100543361005b565b50506100f7565b600180546001600160a01b031916905561007481610077565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d957600080fd5b81516001600160a01b03811681146100f057600080fd5b9392505050565b6080516111f36101196000396000818161010f015261047201526111f36000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806379ba50971161007157806379ba50971461017457806387fd66c51461017c5780638da5cb5b1461019d578063e30c3978146101ae578063f2fde38b146101bf578063f8a8a076146101d257600080fd5b806313fa9b23146100b9578063222ab347146100e25780632ab52a74146100f75780633e413bee1461010a578063499553fb14610149578063715018a61461016c575b600080fd5b6100cc6100c7366004610cb8565b6101f7565b6040516100d99190610d51565b60405180910390f35b6100f56100f0366004610d9f565b61032f565b005b6100f5610105366004610db8565b61056a565b6101317f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d9565b61015c610157366004610e1f565b61067e565b6040516100d99493929190610ee1565b6100f5610755565b6100f5610769565b61018f61018a366004610f19565b6107e0565b6040519081526020016100d9565b6000546001600160a01b0316610131565b6001546001600160a01b0316610131565b6100f56101cd366004610f81565b6109fb565b6101e56101e0366004610d9f565b610a6c565b6040516100d996959493929190610fa3565b61022b604051806080016040528060608152602001600081526020016000815260200160006001600160a01b031681525090565b6001600160a01b0384166000908152600460205260409081902090516102549085908590610ff1565b908152602001604051809103902060405180608001604052908160008201805461027d90611001565b80601f01602080910402602001604051908101604052809291908181526020018280546102a990611001565b80156102f65780601f106102cb576101008083540402835291602001916102f6565b820191906000526020600020905b8154815290600101906020018083116102d957829003601f168201915b505050918352505060018201546020820152600282015460408201526003909101546001600160a01b0316606090910152949350505050565b610337610b3e565b6000818152600360205260409020600481015460ff16156103965760405162461bcd60e51b8152602060048201526014602482015273125b9d9bda58d948185b1c9958591e481c185a5960621b60448201526064015b60405180910390fd5b80600301544211156103dc5760405162461bcd60e51b815260206004820152600f60248201526e125b9d9bda58d948195e1c1a5c9959608a1b604482015260640161038d565b60018101546001600160a01b0316331461042f5760405162461bcd60e51b81526020600482015260146024820152732737ba1034b73b37b4b1b29031bab9ba37b6b2b960611b604482015260640161038d565b6004818101805460ff19166001179055815460028301546040516323b872dd60e01b815233938101939093526001600160a01b03918216602484015260448301527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af11580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df919061103b565b61051c5760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b604482015260640161038d565b600281015460408051338152602081019290925283917e3f2f2b3be6b2550346a6db5e609148d1113f09128692bd7234f1e7825cbc42910160405180910390a2506105676001600255565b50565b604051806080016040528085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602080830186905260408084018690523360609094018490529282526004905281902090516105df9087908790610ff1565b908152604051908190036020019020815181906105fc90826110ac565b50602082015160018201556040808301516002830155606090920151600390910180546001600160a01b0319166001600160a01b03909216919091179055517f72430684eeb07c06285e2ec9c1e1ae4673ed50b524da1e725cee7dc505a2c63790610670903390879087908790879061116c565b60405180910390a150505050565b600460209081526000928352604090922081518083018401805192815290840192909301919091209152805481906106b590611001565b80601f01602080910402602001604051908101604052809291908181526020018280546106e190611001565b801561072e5780601f106107035761010080835404028352916020019161072e565b820191906000526020600020905b81548152906001019060200180831161071157829003601f168201915b5050505060018301546002840154600390940154929390929091506001600160a01b031684565b61075d610b95565b6107676000610bef565b565b60015433906001600160a01b031681146107d75760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161038d565b61056781610bef565b60008085116108225760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640161038d565b4284116108645760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420647565206461746560801b604482015260640161038d565b6040516bffffffffffffffffffffffff1933606090811b8216602084015288901b166034820152604881018690526068810185905242608882015260009060a80160408051601f19818403018152828252805160209182012060c0840183523384526001600160a01b038b16848301528383018a905260608401899052600060808501528251601f8801839004830281018301909352868352935060a0830191908790879081908401838280828437600092018290525093909452505083815260036020818152604092839020855181546001600160a01b03199081166001600160a01b0392831617835592870151600183018054909416911617909155918401516002830155606084015190820155608083015160048201805460ff191691151591909117905560a083015190915060058201906109a390826110ac565b5050604080513381526001600160a01b038a1660208201529081018890528291507f4306dcd7002bbc4547a489ce8403b69225feddf486f71920a8748ce085d6fec69060600160405180910390a29695505050505050565b610a03610b95565b600180546001600160a01b0383166001600160a01b03199091168117909155610a346000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60036020819052600091825260409091208054600182015460028301549383015460048401546005850180546001600160a01b03958616979590941695929360ff9092169291610abb90611001565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae790611001565b8015610b345780601f10610b0957610100808354040283529160200191610b34565b820191906000526020600020905b815481529060010190602001808311610b1757829003601f168201915b5050505050905086565b6002805403610b8f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161038d565b60028055565b6000546001600160a01b031633146107675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038d565b600180546001600160a01b031916905561056781600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610c6a57600080fd5b919050565b60008083601f840112610c8157600080fd5b50813567ffffffffffffffff811115610c9957600080fd5b602083019150836020828501011115610cb157600080fd5b9250929050565b600080600060408486031215610ccd57600080fd5b610cd684610c53565b9250602084013567ffffffffffffffff811115610cf257600080fd5b610cfe86828701610c6f565b9497909650939450505050565b6000815180845260005b81811015610d3157602081850181015186830182015201610d15565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160806020840152610d6d60a0840182610d0b565b9050602084015160408401526040840151606084015260018060a01b0360608501511660808401528091505092915050565b600060208284031215610db157600080fd5b5035919050565b60008060008060608587031215610dce57600080fd5b843567ffffffffffffffff811115610de557600080fd5b610df187828801610c6f565b90989097506020870135966040013595509350505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610e3257600080fd5b610e3b83610c53565b9150602083013567ffffffffffffffff80821115610e5857600080fd5b818501915085601f830112610e6c57600080fd5b813581811115610e7e57610e7e610e09565b604051601f8201601f19908116603f01168101908382118183101715610ea657610ea6610e09565b81604052828152886020848701011115610ebf57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b608081526000610ef46080830187610d0b565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b600080600080600060808688031215610f3157600080fd5b610f3a86610c53565b94506020860135935060408601359250606086013567ffffffffffffffff811115610f6457600080fd5b610f7088828901610c6f565b969995985093965092949392505050565b600060208284031215610f9357600080fd5b610f9c82610c53565b9392505050565b6001600160a01b038781168252861660208201526040810185905260608101849052821515608082015260c060a08201819052600090610fe590830184610d0b565b98975050505050505050565b8183823760009101908152919050565b600181811c9082168061101557607f821691505b60208210810361103557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561104d57600080fd5b81518015158114610f9c57600080fd5b601f8211156110a757600081815260208120601f850160051c810160208610156110845750805b601f850160051c820191505b818110156110a357828155600101611090565b5050505b505050565b815167ffffffffffffffff8111156110c6576110c6610e09565b6110da816110d48454611001565b8461105d565b602080601f83116001811461110f57600084156110f75750858301515b600019600386901b1c1916600185901b1785556110a3565b600085815260208120601f198616915b8281101561113e5788860151825594840194600190910190840161111f565b508582101561115c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03861681526080602082018190528101849052838560a0830137600060a08583010152600060a0601f19601f8701168301019050836040830152826060830152969550505050505056fea264697066735822122016629bec3c05dae707668def42a0c7faacd47249efd305b730e80e55701e699a64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806379ba50971161007157806379ba50971461017457806387fd66c51461017c5780638da5cb5b1461019d578063e30c3978146101ae578063f2fde38b146101bf578063f8a8a076146101d257600080fd5b806313fa9b23146100b9578063222ab347146100e25780632ab52a74146100f75780633e413bee1461010a578063499553fb14610149578063715018a61461016c575b600080fd5b6100cc6100c7366004610cb8565b6101f7565b6040516100d99190610d51565b60405180910390f35b6100f56100f0366004610d9f565b61032f565b005b6100f5610105366004610db8565b61056a565b6101317f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d9565b61015c610157366004610e1f565b61067e565b6040516100d99493929190610ee1565b6100f5610755565b6100f5610769565b61018f61018a366004610f19565b6107e0565b6040519081526020016100d9565b6000546001600160a01b0316610131565b6001546001600160a01b0316610131565b6100f56101cd366004610f81565b6109fb565b6101e56101e0366004610d9f565b610a6c565b6040516100d996959493929190610fa3565b61022b604051806080016040528060608152602001600081526020016000815260200160006001600160a01b031681525090565b6001600160a01b0384166000908152600460205260409081902090516102549085908590610ff1565b908152602001604051809103902060405180608001604052908160008201805461027d90611001565b80601f01602080910402602001604051908101604052809291908181526020018280546102a990611001565b80156102f65780601f106102cb576101008083540402835291602001916102f6565b820191906000526020600020905b8154815290600101906020018083116102d957829003601f168201915b505050918352505060018201546020820152600282015460408201526003909101546001600160a01b0316606090910152949350505050565b610337610b3e565b6000818152600360205260409020600481015460ff16156103965760405162461bcd60e51b8152602060048201526014602482015273125b9d9bda58d948185b1c9958591e481c185a5960621b60448201526064015b60405180910390fd5b80600301544211156103dc5760405162461bcd60e51b815260206004820152600f60248201526e125b9d9bda58d948195e1c1a5c9959608a1b604482015260640161038d565b60018101546001600160a01b0316331461042f5760405162461bcd60e51b81526020600482015260146024820152732737ba1034b73b37b4b1b29031bab9ba37b6b2b960611b604482015260640161038d565b6004818101805460ff19166001179055815460028301546040516323b872dd60e01b815233938101939093526001600160a01b03918216602484015260448301527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af11580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df919061103b565b61051c5760405162461bcd60e51b815260206004820152600e60248201526d14185e5b595b9d0819985a5b195960921b604482015260640161038d565b600281015460408051338152602081019290925283917e3f2f2b3be6b2550346a6db5e609148d1113f09128692bd7234f1e7825cbc42910160405180910390a2506105676001600255565b50565b604051806080016040528085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602080830186905260408084018690523360609094018490529282526004905281902090516105df9087908790610ff1565b908152604051908190036020019020815181906105fc90826110ac565b50602082015160018201556040808301516002830155606090920151600390910180546001600160a01b0319166001600160a01b03909216919091179055517f72430684eeb07c06285e2ec9c1e1ae4673ed50b524da1e725cee7dc505a2c63790610670903390879087908790879061116c565b60405180910390a150505050565b600460209081526000928352604090922081518083018401805192815290840192909301919091209152805481906106b590611001565b80601f01602080910402602001604051908101604052809291908181526020018280546106e190611001565b801561072e5780601f106107035761010080835404028352916020019161072e565b820191906000526020600020905b81548152906001019060200180831161071157829003601f168201915b5050505060018301546002840154600390940154929390929091506001600160a01b031684565b61075d610b95565b6107676000610bef565b565b60015433906001600160a01b031681146107d75760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161038d565b61056781610bef565b60008085116108225760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640161038d565b4284116108645760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420647565206461746560801b604482015260640161038d565b6040516bffffffffffffffffffffffff1933606090811b8216602084015288901b166034820152604881018690526068810185905242608882015260009060a80160408051601f19818403018152828252805160209182012060c0840183523384526001600160a01b038b16848301528383018a905260608401899052600060808501528251601f8801839004830281018301909352868352935060a0830191908790879081908401838280828437600092018290525093909452505083815260036020818152604092839020855181546001600160a01b03199081166001600160a01b0392831617835592870151600183018054909416911617909155918401516002830155606084015190820155608083015160048201805460ff191691151591909117905560a083015190915060058201906109a390826110ac565b5050604080513381526001600160a01b038a1660208201529081018890528291507f4306dcd7002bbc4547a489ce8403b69225feddf486f71920a8748ce085d6fec69060600160405180910390a29695505050505050565b610a03610b95565b600180546001600160a01b0383166001600160a01b03199091168117909155610a346000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60036020819052600091825260409091208054600182015460028301549383015460048401546005850180546001600160a01b03958616979590941695929360ff9092169291610abb90611001565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae790611001565b8015610b345780601f10610b0957610100808354040283529160200191610b34565b820191906000526020600020905b815481529060010190602001808311610b1757829003601f168201915b5050505050905086565b6002805403610b8f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161038d565b60028055565b6000546001600160a01b031633146107675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038d565b600180546001600160a01b031916905561056781600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610c6a57600080fd5b919050565b60008083601f840112610c8157600080fd5b50813567ffffffffffffffff811115610c9957600080fd5b602083019150836020828501011115610cb157600080fd5b9250929050565b600080600060408486031215610ccd57600080fd5b610cd684610c53565b9250602084013567ffffffffffffffff811115610cf257600080fd5b610cfe86828701610c6f565b9497909650939450505050565b6000815180845260005b81811015610d3157602081850181015186830182015201610d15565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160806020840152610d6d60a0840182610d0b565b9050602084015160408401526040840151606084015260018060a01b0360608501511660808401528091505092915050565b600060208284031215610db157600080fd5b5035919050565b60008060008060608587031215610dce57600080fd5b843567ffffffffffffffff811115610de557600080fd5b610df187828801610c6f565b90989097506020870135966040013595509350505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610e3257600080fd5b610e3b83610c53565b9150602083013567ffffffffffffffff80821115610e5857600080fd5b818501915085601f830112610e6c57600080fd5b813581811115610e7e57610e7e610e09565b604051601f8201601f19908116603f01168101908382118183101715610ea657610ea6610e09565b81604052828152886020848701011115610ebf57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b608081526000610ef46080830187610d0b565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b600080600080600060808688031215610f3157600080fd5b610f3a86610c53565b94506020860135935060408601359250606086013567ffffffffffffffff811115610f6457600080fd5b610f7088828901610c6f565b969995985093965092949392505050565b600060208284031215610f9357600080fd5b610f9c82610c53565b9392505050565b6001600160a01b038781168252861660208201526040810185905260608101849052821515608082015260c060a08201819052600090610fe590830184610d0b565b98975050505050505050565b8183823760009101908152919050565b600181811c9082168061101557607f821691505b60208210810361103557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561104d57600080fd5b81518015158114610f9c57600080fd5b601f8211156110a757600081815260208120601f850160051c810160208610156110845750805b601f850160051c820191505b818110156110a357828155600101611090565b5050505b505050565b815167ffffffffffffffff8111156110c6576110c6610e09565b6110da816110d48454611001565b8461105d565b602080601f83116001811461110f57600084156110f75750858301515b600019600386901b1c1916600185901b1785556110a3565b600085815260208120601f198616915b8281101561113e5788860151825594840194600190910190840161111f565b508582101561115c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03861681526080602082018190528101849052838560a0830137600060a08583010152600060a0601f19601f8701168301019050836040830152826060830152969550505050505056fea264697066735822122016629bec3c05dae707668def42a0c7faacd47249efd305b730e80e55701e699a64736f6c63430008130033",
  "devdoc": {
    "details": "implementation of the BaseFlowCore abstract contract This contract is used for deployment while inheriting all functionality from BaseFlowCore",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "details": "Constructor that initializes the contract with the USDC token address",
        "params": {
          "_usdc": "Address of the USDC token contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "title": "BaseFlowImplementation",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 206,
        "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 399,
        "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
        "label": "invoices",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Invoice)385_storage)"
      },
      {
        "astId": 406,
        "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
        "label": "inventory",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(Inventory)394_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(Inventory)394_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct BaseFlowCore.Inventory))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(Inventory)394_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Invoice)385_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BaseFlowCore.Invoice)",
        "numberOfBytes": "32",
        "value": "t_struct(Invoice)385_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Inventory)394_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct BaseFlowCore.Inventory)",
        "numberOfBytes": "32",
        "value": "t_struct(Inventory)394_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Inventory)394_storage": {
        "encoding": "inplace",
        "label": "struct BaseFlowCore.Inventory",
        "members": [
          {
            "astId": 387,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 389,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "quantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 391,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 393,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "merchant",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Invoice)385_storage": {
        "encoding": "inplace",
        "label": "struct BaseFlowCore.Invoice",
        "members": [
          {
            "astId": 374,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "merchant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 376,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "customer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 378,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 380,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "dueDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 382,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "paid",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 384,
            "contract": "contracts/BaseFlowImplementation.sol:BaseFlowImplementation",
            "label": "metadata",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}